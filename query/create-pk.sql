DECLARE
  v_sql VARCHAR2(4000);
BEGIN
  -- Drop existing primary key constraints
  FOR r IN (
    SELECT constraint_name, table_name 
    FROM user_constraints 
    WHERE constraint_type = 'P'
    AND constraint_name LIKE '%_PK'
  ) LOOP
    v_sql := 'ALTER TABLE "' || r.table_name || '" DROP CONSTRAINT "' || r.constraint_name || '"';
    BEGIN
      EXECUTE IMMEDIATE v_sql;
    EXCEPTION WHEN OTHERS THEN
      NULL; -- Ignore errors during drop
    END;
  END LOOP;
  
 -- Add primary key constraints for each table
  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ASSETACCOUNTS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ASSETACCOUNTS GROUP BY COA)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ASSETACCOUNTS WHERE COA IS NULL';
    v_sql := 'ALTER TABLE "ASSETACCOUNTS" ADD CONSTRAINT "ASSETACCOUNTS_PK" PRIMARY KEY ("COA")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ASSETACCOUNTS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ASSETCLASSES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ASSETCLASSES GROUP BY GROUPCLASSES_ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ASSETCLASSES WHERE GROUPCLASSES_ID IS NULL';
    v_sql := 'ALTER TABLE "ASSETCLASSES" ADD CONSTRAINT "ASSETCLASSES_PK" PRIMARY KEY ("GROUPCLASSES_ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ASSETCLASSES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ASSETS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ASSETS GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ASSETS WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "ASSETS" ADD CONSTRAINT "ASSETS_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ASSETS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ASSET_SAP_FAILED WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ASSET_SAP_FAILED GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ASSET_SAP_FAILED WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "ASSET_SAP_FAILED" ADD CONSTRAINT "ASSET_SAP_FAILED_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ASSET_SAP_FAILED_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM BRANCHES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM BRANCHES GROUP BY ID_CABANG)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM BRANCHES WHERE ID_CABANG IS NULL';
    v_sql := 'ALTER TABLE "BRANCHES" ADD CONSTRAINT "BRANCHES_PK" PRIMARY KEY ("ID_CABANG")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating BRANCHES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM COSTCENTERS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM COSTCENTERS GROUP BY KODE_PUSAT_BIAYA)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM COSTCENTERS WHERE KODE_PUSAT_BIAYA IS NULL';
    v_sql := 'ALTER TABLE "COSTCENTERS" ADD CONSTRAINT "COSTCENTERS_PK" PRIMARY KEY ("KODE_PUSAT_BIAYA")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating COSTCENTERS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM DEPRECIATIONS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM DEPRECIATIONS GROUP BY KODE_PENYUSUTAN)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM DEPRECIATIONS WHERE KODE_PENYUSUTAN IS NULL';
    v_sql := 'ALTER TABLE "DEPRECIATIONS" ADD CONSTRAINT "DEPRECIATIONS_PK" PRIMARY KEY ("KODE_PENYUSUTAN")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating DEPRECIATIONS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM DEPRECIATION_VALUES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM DEPRECIATION_VALUES GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM DEPRECIATION_VALUES WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "DEPRECIATION_VALUES" ADD CONSTRAINT "DEPRECIATION_VALUES_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating DEPRECIATION_VALUES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM DETAILASSETS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM DETAILASSETS GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM DETAILASSETS WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "DETAILASSETS" ADD CONSTRAINT "DETAILASSETS_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating DETAILASSETS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM DIMENSI_SATUAN WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM DIMENSI_SATUAN GROUP BY NAME)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM DIMENSI_SATUAN WHERE NAME IS NULL';
    v_sql := 'ALTER TABLE "DIMENSI_SATUAN" ADD CONSTRAINT "DIMENSI_SATUAN_PK" PRIMARY KEY ("NAME")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating DIMENSI_SATUAN_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ELIMINATION WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ELIMINATION GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ELIMINATION WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "ELIMINATION" ADD CONSTRAINT "ELIMINATION_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ELIMINATION_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM GROUPASSETS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM GROUPASSETS GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM GROUPASSETS WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "GROUPASSETS" ADD CONSTRAINT "GROUPASSETS_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating GROUPASSETS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM GROUPCLASSES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM GROUPCLASSES GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM GROUPCLASSES WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "GROUPCLASSES" ADD CONSTRAINT "GROUPCLASSES_ID_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating GROUPCLASSES_ID_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM INSURANCES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM INSURANCES GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM INSURANCES WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "INSURANCES" ADD CONSTRAINT "INSURANCES_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating INSURANCES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM MASTER_ASURANSI WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM MASTER_ASURANSI GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM MASTER_ASURANSI WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "MASTER_ASURANSI" ADD CONSTRAINT "MASTER_ASURANSI_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating MASTER_ASURANSI_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM MONITORING_FAILED WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM MONITORING_FAILED GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM MONITORING_FAILED WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "MONITORING_FAILED" ADD CONSTRAINT "MONITORING_FAILED_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating MONITORING_FAILED_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM MONITORING_INTEGRATOR WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM MONITORING_INTEGRATOR GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM MONITORING_INTEGRATOR WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "MONITORING_INTEGRATOR" ADD CONSTRAINT "MONITORING_INTEGRATOR_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating MONITORING_INTEGRATOR_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM NOTIFIKASI WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM NOTIFIKASI GROUP BY ID_NOTIFIKASI)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM NOTIFIKASI WHERE ID_NOTIFIKASI IS NULL';
    v_sql := 'ALTER TABLE "NOTIFIKASI" ADD CONSTRAINT "NOTIFIKASI_PK" PRIMARY KEY ("ID_NOTIFIKASI")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating NOTIFIKASI_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM PBB WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PBB GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM PBB WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "PBB" ADD CONSTRAINT "PBB_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating PBB_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM PERIOD WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PERIOD GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM PERIOD WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "PERIOD" ADD CONSTRAINT "PERIOD_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating PERIOD_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM PERIOD_REQUEST WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PERIOD_REQUEST GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM PERIOD_REQUEST WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "PERIOD_REQUEST" ADD CONSTRAINT "PERIOD_REQUEST_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating PERIOD_REQUEST_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM PICTUREASSETS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM PICTUREASSETS GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM PICTUREASSETS WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "PICTUREASSETS" ADD CONSTRAINT "PICTUREASSETS_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating PICTUREASSETS_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM "REFERENCES" WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM "REFERENCES" GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM "REFERENCES" WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "REFERENCES" ADD CONSTRAINT "REFERENCES_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating REFERENCES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM ROLES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM ROLES GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM ROLES WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "ROLES" ADD CONSTRAINT "ROLES_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating ROLES_PK ❌: ' || SQLERRM);
  END;

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM USERS WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM USERS GROUP BY ID)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM USERS WHERE ID IS NULL';
    v_sql := 'ALTER TABLE "USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("ID")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating USERS_PK ❌: ' || SQLERRM);
  END;  

  BEGIN
    -- delete duplicate
    EXECUTE IMMEDIATE 'DELETE FROM USES WHERE ROWID NOT IN (SELECT MIN(ROWID) FROM USES GROUP BY NO_ASET)';
    -- delete null
    EXECUTE IMMEDIATE 'DELETE FROM USES WHERE NO_ASET IS NULL';
    v_sql := 'ALTER TABLE "USES" ADD CONSTRAINT "USES_PK" PRIMARY KEY ("NO_ASET")';
    EXECUTE IMMEDIATE v_sql;
  EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error creating USES_PK ❌: ' || SQLERRM);
  END;  
END;